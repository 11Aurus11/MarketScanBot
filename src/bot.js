import 'dotenv/config';
import { Telegraf } from 'telegraf';
import parseProduct from './parser.js';

const bot = new Telegraf(process.env.BOT_TOKEN);
let isRunning = true;

const botCommand = [
    { command: '/help', description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã' },
    { command: '/parse platform <ID>', description: '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ wb –∏–ª–∏ ozon' },
    { command: '/clear', description: '–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —á–∞—Ç' },
];

function getProductData() {

    bot.command('start', ctx => {
        console.log('start');
        if (isRunning) {
            const helpMessage = botCommand.map(cmd => `${cmd.command} ‚Äî ${cmd.description}`).join('\n');
            ctx.reply(`–ü—Ä–∏–≤–µ—Ç! üëã\n–û—Ç–ø—Ä–∞–≤—å ID —Ç–æ–≤–∞—Ä–∞ Wildberries –∏–ª–∏ Ozon.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n${helpMessage}`);
        } else {
            ctx.reply('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.');
        }
    });

    bot.command('stop', ctx => {
        console.log('stop');
            ctx.reply('–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å üôÇ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞');
            bot.stop();
    });

    bot.command('help', ctx => {
        console.log('help');
        const message = botCommand.map(cmd => `${cmd.command} ‚Äî ${cmd.description}`).join('\n');
        ctx.reply(message);
    });

    bot.command('parse', async (ctx) => {
        const messageText = ctx.message.text;
        const parts = messageText.split(' ');
        const platform = parts[1]
        const productId = parts[2];

        if(!platform || !productId) {
            ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ ID —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: /parse wb 12345678 –∏–ª–∏ /parse ozon 1748041794');
            return
        }

        ctx.reply(`üîç –ò—â—É –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID: (${platform.toUpperCase()})...`)

        const data = await parseProduct(platform, productId)

        if(!data) {
            ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å ID –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.')
            return
        }

        ctx.reply(`
    ‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:
    üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: ${data.title}
    üí∞ –¶–µ–Ω–∞: ${data.price}
    üìà –í –Ω–∞–ª–∏—á–∏–∏: ${data.inStock}
    üîó –°—Å—ã–ª–∫–∞: ${data.url}
            `)
    });

    bot.command('clear', async (ctx) => {
        let i = 0;
        while(true) {
            try {
                await ctx.deleteMessage(ctx.message.message_id - i++);
            } catch(e) {
                break
            }
        }
    })

    bot.launch();
}

getProductData();