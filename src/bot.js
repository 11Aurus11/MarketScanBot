import 'dotenv/config';
import { Telegraf, Markup } from 'telegraf';
import parseProduct from './parser.js';
import db from './db.js'
import { message } from 'telegraf/filters';

const { addMessage, getAllMessages, clearDB, nullDB } = db;

const bot = new Telegraf(process.env.BOT_TOKEN);
let isRunning = true;

const botCommand = [
    { command: '/help', description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã' },
    { command: '/parse platform <ID>', description: '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ wb –∏–ª–∏ ozon' },
    { command: '/clear', description: '–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —á–∞—Ç' },
    { command: '/nullDB', description: '–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –ë–î –æ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏–π' },
];

function getProductData() {
    bot.use((ctx, next) => {
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', ctx.updateType, ctx.update);
        return next();
    });

    // –ö–æ–º–∞–Ω–¥–∞ /start
    bot.command('start', async (ctx) => {
        console.log('start');

        if (!isRunning) {
            await ctx.reply('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.');
            return;
        }

        if (!Array.isArray(botCommand)) {
            console.log('botCommand –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤!');
            return;
        }
        
        const helpMessage = botCommand.map(cmd => `${cmd.command} ‚Äî ${cmd.description}`).join('\n');
        const keyboard = Markup.keyboard([['–ú–µ–Ω—é']]).resize().oneTime(false);

        try {
            await ctx.reply(
                `–ü—Ä–∏–≤–µ—Ç! üëã\n–û—Ç–ø—Ä–∞–≤—å ID —Ç–æ–≤–∞—Ä–∞ Wildberries –∏–ª–∏ Ozon.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n${helpMessage}`,
                keyboard
            );
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', e.message);
        }
    });


    // –ö–æ–º–∞–Ω–¥–∞ –ú–µ–Ω—é
    bot.command('–ú–µ–Ω—é', (ctx) => {
        const menuText = botCommand.map(cmd => `${cmd.command} ‚Äî ${cmd.description}`).join('\n');
        ctx.reply(menuText);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stop
    bot.command('stop', ctx => {
        console.log('stop');
        ctx.reply('–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å üôÇ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞');
        bot.stop();
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    bot.command('help', ctx => {
        console.log('help');
        const message = botCommand.map(cmd => `${cmd.command} ‚Äî ${cmd.description}`).join('\n');
        ctx.reply(message);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /parse
    bot.command('parse', async (ctx) => {
        const messageText = ctx.message.text;
        const parts = messageText.split(' ');
        const platform = parts[1];
        const productId = parts[2];

        if(!platform || !productId) {
            ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ ID —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: /parse wb 12345678 –∏–ª–∏ /parse ozon 1748041794');
            return;
        }

        ctx.reply(`üîç –ò—â—É –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID: (${platform.toUpperCase()})...`);

        const data = await parseProduct(platform, productId);

        if(!data) {
            ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å ID –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.');
            return;
        }

        ctx.reply(`
    ‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:
    üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: ${data.title}
    üí∞ –¶–µ–Ω–∞: ${data.price}
    üìà –í –Ω–∞–ª–∏—á–∏–∏: ${data.inStock}
    üîó –°—Å—ã–ª–∫–∞: ${data.url}
        `);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /clear
    bot.command('clear', async (ctx) => {
        // const messages = getAllMessages();
        // console.log('–°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', messages);

        // const deletePromisesDB = messages.map(async (id) => {
        //     try {
        //         await ctx.deleteMessage(id);
        //     } catch (e) {
        //         console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${id} –∏–∑ –±–∞–∑—ã: ${e.message}`);
        //     }
        // });
        // await Promise.all(deletePromisesDB);

        // let i = 0;
        // while (true) {
        //     try {
        //         await ctx.deleteMessage(ctx.message.message_id - i++);
        //     } catch (e) {
        //         break;
        //     }
        // }

        // clearDB();

        // const sentMessage = await ctx.reply('–ß–∞—Ç –æ—á–∏—â–µ–Ω!');
        // setTimeout(() => {
        //     ctx.deleteMessage(sentMessage.message_id).catch(e => {
        //         console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—á–∏—Å—Ç–∫–µ:', e.message);
        //     });
        // }, 1000);
        const messages = getAllMessages()
        console.log('–°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', messages)

        const deletePromisesDB = message.map(async (id) => {
            try {
                await ctx.deleteMessage()
            } catch {
                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${id} –∏–∑ –±–∞–∑—ã: ${e.message}`);
            }
        })
        await Promise.all(deletePromisesDB)

        let i = 0
        while(true) {
            try {
                await ctx.deleteMessage(ctx.message.message_id - i++)
            } catch(e) {
                break
            }
        }
        clearDB()
        const sentMessage = ctx.reply('–ß–∞—Ç –æ—á–∏—â–µ–Ω!')
        setTimeout()
    });


    bot.command('nullDB', async (ctx) => {
        const messagesNull = getAllMessages();
        console.log(messagesNull);

        const deletePromisesID = messagesNull.map(async (id) => {
            try {
                await ctx.deleteMessage(id);
            } catch(e) {
                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å id —Å–æ–æ–±—â–µ–Ω–∏–π ${id}: ${e.message}`);
            }
        });

        await Promise.all(deletePromisesID); // —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è

        const sentMessage = await ctx.reply('ID –ë–î –æ—á–∏—â–µ–Ω!');
        setTimeout(() => {
            ctx.deleteMessage(sentMessage.message_id).catch(e => {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—á–∏—Å—Ç–∫–µ:', e.message);
            });
        }, 1000);
    });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.on('message', (ctx) => {
        if(ctx.message.from.is_bot) return;
        addMessage(ctx.message.message_id);
    });

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ'));
}

getProductData();